#!/usr/bin/env python3
"""
Script pour recr√©er la table test_constraints avec le bon sch√©ma
(sans le champ "content" qui causait des probl√®mes)
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from storage.schema_manager import AdaptiveSchema, SchemaField, FieldType, SchemaManager
import time

def main():
    print("üîÑ Recr√©ation de la table test_constraints...")
    
    try:
        # Initialiser le schema manager directement
        print("   Initialisation du SchemaManager...")
        schema_manager = SchemaManager("data")
        print("   ‚úÖ SchemaManager initialis√©")
        
        # Cr√©er un nouveau sch√©ma pour test_constraints
        print("   Cr√©ation du sch√©ma AdaptiveSchema...")
        schema = AdaptiveSchema(name="test_constraints", version=1)
        print(f"   ‚úÖ Sch√©ma cr√©√©: {schema.name} v{schema.version}")
        
        # Ajouter les champs syst√®me essentiels (sans "content")
        print("   Ajout des champs syst√®me...")
        
        # Champ ID
        id_field = SchemaField(
            name="id", 
            field_type=FieldType.PI_SEQUENCE, 
            is_required=True, 
            is_unique=True, 
            description="Primary œÄ-ID"
        )
        schema.add_field(id_field)
        print("   ‚úÖ Champ 'id' ajout√©")
        
        # Champ created_at
        created_field = SchemaField(
            name="created_at", 
            field_type=FieldType.DATETIME, 
            is_required=True, 
            default_value=time.time(), 
            description="Creation timestamp"
        )
        schema.add_field(created_field)
        print("   ‚úÖ Champ 'created_at' ajout√©")
        
        # Champ updated_at
        updated_field = SchemaField(
            name="updated_at", 
            field_type=FieldType.DATETIME, 
            is_required=True, 
            default_value=time.time(), 
            description="Last update timestamp"
        )
        schema.add_field(updated_field)
        print("   ‚úÖ Champ 'updated_at' ajout√©")
        
        # Ajouter quelques champs de test
        print("   Ajout des champs de test...")
        
        name_field = SchemaField(
            name="name", 
            field_type=FieldType.STRING, 
            is_required=False, 
            description="Test name field"
        )
        schema.add_field(name_field)
        print("   ‚úÖ Champ 'name' ajout√©")
        
        age_field = SchemaField(
            name="age", 
            field_type=FieldType.INTEGER, 
            is_required=False, 
            description="Test age field"
        )
        schema.add_field(age_field)
        print("   ‚úÖ Champ 'age' ajout√©")
        
        active_field = SchemaField(
            name="is_active", 
            field_type=FieldType.BOOLEAN, 
            is_required=False, 
            default_value=True,
            description="Test boolean field"
        )
        schema.add_field(active_field)
        print("   ‚úÖ Champ 'is_active' ajout√©")
        
        # Persister le sch√©ma
        print("   Persistance du sch√©ma...")
        schema_manager._persist_schema(schema)
        print("   ‚úÖ Sch√©ma persist√©")
        
        # Mettre √† jour le cache en m√©moire
        print("   Mise √† jour du cache...")
        schema_manager.schemas["test_constraints"] = schema
        print("   ‚úÖ Cache mis √† jour")
        
        print("‚úÖ Table test_constraints recr√©√©e avec succ√®s!")
        print(f"   - Nombre de champs: {len(schema.fields)}")
        print(f"   - Champs: {[field.name for field in schema.fields.values()]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    main()
