[build-system]
requires = ["setuptools>=68.0.0", "wheel", "setuptools_scm[toml]>=8.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "spirapi"
dynamic = ["version"]
description = "Enterprise-grade Pi-D Indexation System with mathematical algorithms, spiral mathematics, and advanced AI capabilities"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "SpiraPi Team", email = "contact@spirapi.dev"}
]
maintainers = [
    {name = "SpiraPi Team", email = "contact@spirapi.dev"}
]
keywords = ["pi", "mathematics", "database", "indexing", "spiral", "algorithms", "ai", "machine-learning", "enterprise"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
]
requires-python = ">=3.8"
dependencies = [
    # Core scientific and mathematical libraries
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    
    # Web framework and server
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "jinja2>=3.1.0",
    "python-multipart>=0.0.20",
    "httpx>=0.25.0",
    
    # Logging and utilities
    "loguru>=0.7.0",
    
    # Database and ORM
    "pydantic>=2.5.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    
    # AI and machine learning
    "torch>=2.0.0",
    "transformers>=4.35.0",
    "sentence-transformers>=2.2.0",
    
    # Data processing and utilities
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    
    # Enterprise features
    "redis>=5.0.0",
    "psycopg2-binary>=2.9.0",
    "kafka-python>=2.0.0",
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    
    # Security and authentication
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.20",
    
    # Utilities
    "click>=8.1.0",
    "rich>=13.7.0",
    "tqdm>=4.66.0",
    "pyyaml>=6.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "tox>=4.11.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.25.0",
    "faker>=20.0.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
enterprise = [
    "kubernetes>=28.0.0",
    "helm>=0.7.0",
    "prometheus-client>=0.19.0",
    "grafana-api>=1.0.3",
    "elasticsearch>=8.10.0",
]

[project.scripts]
spirapi = "src.cli.spirapi_cli:cli"
spirapi-server = "src.api.main:main"
spirapi-admin = "src.web.admin_interface:main"
spirapi-demo = "scripts.demo_ai_finale:SpiraPiAIFinalDemo"

[project.urls]
Homepage = "https://github.com/iyotee/SpiraPi"
Documentation = "https://spirapi.readthedocs.io/"
Repository = "https://github.com/iyotee/SpiraPi.git"
Issues = "https://github.com/iyotee/SpiraPi/issues"
Changelog = "https://github.com/iyotee/SpiraPi/blob/main/CHANGELOG.md"
"Bug Tracker" = "https://github.com/iyotee/SpiraPi/issues"
"Source Code" = "https://github.com/iyotee/SpiraPi"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.dynamic]
version = {attr = "spirapi.__version__"}

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
testpaths = ["tests", "scripts"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "numpy.*",
    "scipy.*",
    "torch.*",
    "transformers.*",
    "sklearn.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["B011"]
